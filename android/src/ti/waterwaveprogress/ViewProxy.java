/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.waterwaveprogress;

import org.appcelerator.kroll.KrollDict;

import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.titanium.util.TiConvert;
import org.appcelerator.titanium.proxy.TiViewProxy;
import org.appcelerator.titanium.view.TiUIView;
import org.appcelerator.titanium.TiApplication;

import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.app.Activity;

import android.content.Context;
import cn.modificator.waterwave_progress.*;

import org.appcelerator.kroll.common.TiMessenger;
import android.os.Handler;
import org.appcelerator.kroll.common.AsyncResult;
import android.os.Message;

@Kroll.proxy(creatableInModule = WaterwaveprogressModule.class)
public class ViewProxy extends TiViewProxy {
	private static final int MSG_SET_PROGRESS = 70000;
	// Standard Debugging variables
	TiApplication appContext;
	Activity activity;
	private static final String LCAT = ViewProxy.class.getSimpleName();

	public WaterWaveProgress mWaterWaveProgressView;
	/* all default attributes: */
	private int mRingColor, mRingBgColor, mWaterColor, mWaterBgColor,
			mFontSize, mTextColor;
	float mCrestCount = 1.5f;
	int mProgress = 0, mMaxProgress = 100;
	private float mRingWidth, mRing2WaterWidth;
	private boolean mShowNumerical = true, mShowRing = true;
	private int mWaveFactor = 0;
	private boolean mIsWaving = false;
	private float mAmplitude = 30.0F; // 20F
	private float mWaveSpeed = 0.070F; // 0.020F
	private int mWaterAlpha = 255; // 255
	private boolean autoWave = true;
	progressView view;

	// Constructor of viewproxy class
	public ViewProxy() {
		super();
		appContext = TiApplication.getInstance();
		activity = appContext.getCurrentActivity();
	}

	@Override
	public TiUIView createView(Activity activity) {
		TiUIView view = new progressView(this);
		view.getLayoutParams().autoFillsHeight = true;
		view.getLayoutParams().autoFillsWidth = true;
		return view;
	}

	@Override
	public void handleCreationDict(KrollDict options) {
		super.handleCreationDict(options);
		//Log.d(LCAT, "start ViewProxy::handleCreationDict");
		if (options.containsKeyAndNotNull("progress")) {
			mProgress = TiConvert.toInt(options, "progress");
		}
		if (options.containsKeyAndNotNull("maxProgress")) {
			mMaxProgress = TiConvert.toInt(options, "maxProgress");
		}
		if (options.containsKeyAndNotNull("ringWidth")) {
			mRingWidth = TiConvert.toFloat(options, "ringWidth");
		}
		if (options.containsKeyAndNotNull("fontSize")) {
			mFontSize = TiConvert.toInt(options, "fontSize");
		}
		if (options.containsKeyAndNotNull("ring2WaterWidth")) {
			mRing2WaterWidth = TiConvert.toFloat(options, "ring2WaterWidth");
		}
		if (options.containsKeyAndNotNull("ringColor")) {
			mRingColor = TiConvert.toColor(options, "ringColor");
		}
		if (options.containsKeyAndNotNull("ringBgColor")) {
			mRingBgColor = TiConvert.toColor(options, "ringBgColor");
		}
		if (options.containsKeyAndNotNull("waterColor")) {
			mWaterColor = TiConvert.toColor(options, "waterColor");
		}
		if (options.containsKeyAndNotNull("waterBgColor")) {
			mWaterBgColor = TiConvert.toColor(options, "waterBgColor");
		}
		if (options.containsKeyAndNotNull("textColor")) {
			mTextColor = TiConvert.toColor(options, "textColor");
		}
		if (options.containsKeyAndNotNull("showNumerical")) {
			mShowNumerical = TiConvert.toBoolean(options, "showNumerical");
		}
		if (options.containsKeyAndNotNull("showRing")) {
			mShowRing = TiConvert.toBoolean(options, "showRing");
		}
		if (options.containsKeyAndNotNull("crestCount")) {
			mCrestCount = TiConvert.toFloat(options, "crestCount");
		}
		if (options.containsKeyAndNotNull("amplitude")) {
			mAmplitude = TiConvert.toFloat(options, "amplitude");
		}
		if (options.containsKeyAndNotNull("α")) {
			mWaterAlpha = TiConvert.toInt(options, "α");
		}
		if (options.containsKeyAndNotNull("waveFactor")) {
			mWaveFactor = TiConvert.toInt(options, "waveFactor");
		}
		if (options.containsKeyAndNotNull("autoWave")) {
			autoWave = TiConvert.toBoolean(options, "autoWave");
		}
		//Log.d(LCAT, "ViewProxy::handleCreationDict finished ");
	}

	/*
	 * The progressView class extends the TiUIView class. The TiUIView can be
	 * added to other Titanium views and windows, which makes it the perfect
	 * place for a UIView to be added so that it can be displayed in a Titanium
	 * app. This class creates the native view to display. The class implements
	 * the the constructor and one method of the TiUIView class, and custom
	 * setter methods:
	 */
	public class progressView extends TiUIView {
		public progressView(TiViewProxy proxy) {
			super(proxy);
			Context context = TiApplication.getInstance()
					.getApplicationContext();
			//Log.d(LCAT, "progressView started");
			LayoutParams lp = new LayoutParams(LayoutParams.WRAP_CONTENT,
					LayoutParams.WRAP_CONTENT);
			LinearLayout container = new LinearLayout(proxy.getActivity());
			container.setLayoutParams(lp);

			mWaterWaveProgressView = new WaterWaveProgress(context);

			mWaterWaveProgressView.setAmplitude(mAmplitude);
			mWaterWaveProgressView.setCrestCount(mCrestCount);
			mWaterWaveProgressView.setFontSize(mFontSize);
			mWaterWaveProgressView.setIsWaving(mIsWaving);
			mWaterWaveProgressView.setProgress(mProgress);
			mWaterWaveProgressView.setMaxProgress(mMaxProgress);
			mWaterWaveProgressView.setRingWidth(mRingWidth);
			mWaterWaveProgressView.setShowRing(mShowRing);
			mWaterWaveProgressView.setShowNumerical(mShowNumerical);
			mWaterWaveProgressView.setWaterColor(mWaterColor);
			mWaterWaveProgressView.setWaterBgColor(mWaterBgColor);
			mWaterWaveProgressView.setRingColor(mRingColor);
			mWaterWaveProgressView.setRingBgColor(mRingBgColor);
			mWaterWaveProgressView.setTextColor(mTextColor);
			mWaterWaveProgressView.setRingWidth(mRingWidth);
			mWaterWaveProgressView.setRing2WaterWidth(mRing2WaterWidth);
			mWaterWaveProgressView.setWaveFactor(mWaveFactor);
			mWaterWaveProgressView.setWaveSpeed(mWaveSpeed);
			mWaterWaveProgressView.setWaterAlpha(mWaterAlpha);
			//Log.d(LCAT, "All attributes for View are set");
			mWaterWaveProgressView.initView(context);
			container.addView(mWaterWaveProgressView);
			setNativeView(container);
			if (proxy.hasListeners("viewCreated")) {
				fireEvent("viewCreated", null);
			}
		}

		/*
		 * This method allows the application to processes properties passed in
		 * when the view is created. In this example, the application intercepts
		 * the color property to set the native view's background color.
		 */
		@Override
		public void processProperties(KrollDict d) {
			//Log.d(LCAT, "processProperties triggered");
			super.processProperties(d);
		}
	}

	/* I N T E R F A C E S to Titanium */

	@Kroll.setProperty
	@Kroll.method
	public void setProgress(final int arg) {
		if (mWaterWaveProgressView != null)
			if (!TiApplication.isUIThread()) {
				// If we are not on the UI thread, need to use a message to set
				// the progress
				TiMessenger.sendBlockingMainMessage(new Handler(TiMessenger
						.getMainMessenger().getLooper(),
						new Handler.Callback() {
							public boolean handleMessage(Message msg) {
								switch (msg.what) {
								case MSG_SET_PROGRESS: {
									AsyncResult result = (AsyncResult) msg.obj;
									result.setResult(null);
									mWaterWaveProgressView
											.setProgress(TiConvert.toInt(arg));
									return true;
								}
								}
								return false;
							}
						}).obtainMessage(MSG_SET_PROGRESS), arg);
			} else {
				mWaterWaveProgressView.setProgress(TiConvert.toInt(arg));
			}
	}

	@Kroll.method
	public void hideNumerical() {
		if (mWaterWaveProgressView != null)
			mWaterWaveProgressView.setShowNumerical(false);
	}

	@Kroll.method
	public void showNumerical() {
		if (mWaterWaveProgressView != null)
			mWaterWaveProgressView.setShowNumerical(true);
	}

	@Kroll.method
	public void hideRing() {
		if (mWaterWaveProgressView != null)
			mWaterWaveProgressView.setShowRing(false);
	}

	@Kroll.method
	public void showRing() {
		if (mWaterWaveProgressView != null)
			mWaterWaveProgressView.setShowRing(true);
	}

	@Kroll.method
	public void setCrestCount(int arg) {
		if (mWaterWaveProgressView != null)
			mWaterWaveProgressView.setCrestCount(TiConvert.toInt(arg));
	}

	@Kroll.method
	public void setRingWidth(float arg) {
		if (mWaterWaveProgressView != null)
			mWaterWaveProgressView.setRingWidth(TiConvert.toFloat(arg));
	}

	@Kroll.method
	public void setCrestCount(float arg) {
		if (mWaterWaveProgressView != null)
			mWaterWaveProgressView.setCrestCount(TiConvert.toFloat(arg));
	}

	@Kroll.method
	public void setAmplitude(float arg) {
		if (mWaterWaveProgressView != null)
			mWaterWaveProgressView.setAmplitude(TiConvert.toFloat(arg));
	}

	@Kroll.method
	public void setWaveSpeed(float arg) {
		if (mWaterWaveProgressView != null)
			mWaterWaveProgressView.setWaveSpeed(TiConvert.toFloat(arg));
	}

	@Kroll.method
	public void setWaterAlpha(float arg) {
		if (mWaterWaveProgressView != null)
			mWaterWaveProgressView.setWaterAlpha(TiConvert.toFloat(arg));
	}

}
